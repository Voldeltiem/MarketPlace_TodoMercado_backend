const express = require("express"); index
const jwt = require("jsonwebtoken");
const cors = require("cors");
const {
  chequearCredenciales,
  verificarToken,
  reportarSolicitudes,
  reportarSolicitudesRegistro,
} = require("./middlewares/middlewares");
const app = express();
const PORT = 3000;
app.listen(PORT, console.log(`¡Servidor ${PORT} encendido!`));
app.use(express.json());
app.use(cors());
const {
  verificarUsuario,
  obtenerDatosUsuario,
  agregarUsuario,
  deleteUsuario,
  modificarPassword,
  verificarCorreo,
} = require("./controllers/usuarios.js");
const {
  obtenerPublicaciones,
  crearNuevaPublicacion,obtenerPublicacionPorId,borrarPublicacionPorId,
} = require("./controllers/productos");

app.post("/registro", cors(), async (req, res) => {
  try {
    const { nombre, email, password, telefono } = req.body;
    await verificarCorreo(email);
    console.log(req.body);
    await agregarUsuario(nombre, email, password, telefono);
    res.send("Usuario creado con exito");
  } catch (error) {
    res.status(500).send(error);
    console.log("no es posible ejecutar el requerimiento");
  }
});
app.post(
  "/login",
  chequearCredenciales,
  reportarSolicitudes,
  cors(),
  async (req, res) => {
    try {
      const { email, password } = req.body;
      await verificarUsuario(email, password);
      const token = jwt.sign({ email }, "market23");
      console.log(`este es el token: ${token}`);
      res.send(token);
    } catch (error) {
      res.status(500).send(error);
      console.log("no es posible ejecutar el requerimiento");
    }
  }
);

app.get("/perfil", verificarToken, cors(), async (req, res) => {
  try {
    const Authorization = req.header("Authorization");
    console.log(Authorization);
    const token = Authorization.split("Bearer ")[1];
    console.log(token);
    const { email } = jwt.decode(token);

    //const { email } = req.body;
    console.log(email);
    const usuario = await obtenerDatosUsuario(email);
    res.send(usuario);
  } catch (error) {
    res.status(500).send(error);
    console.log("no es posible ejecutar el requerimiento");
  }
});

app.delete("/perfil", verificarToken, cors(), async (req, res) => {
  try {
    const Authorization = req.header("Authorization");
    const token = Authorization.split("Bearer ")[1];
    const { email } = jwt.decode(token);
    console.log(email);
    //const {email} = req.query
    const usuario = await deleteUsuario(email);
    res.send("usuario borrado");
  } catch (error) {
    res.status(500).send(error);
    console.log("no es posible ejecutar el requerimiento");
  }
});
app.patch('/perfil', async(req, res) => {
  try {
    console.log("aqui");
    const { email, password, newpassword } = req.body;
    console.log(newpassword);
    console.log(email);
    await verificarUsuario(email, password);
    await modificarPassword(email, newpassword);
  res.send('Operación PATCH en /perfil exitosa');}catch (error) {
    res.status(500).send(error);
    console.log("no es posible ejecutar el requerimiento");
  }
});
/*app.patch("/pefil" /*verificarToken,  reportarSolicitudes,  cors(),  async (req, res) => {
    try {
      console.log("aqui");
      const { id } = req.params;
      const { email, password, newpassword } = req.body;
      //console.log(newpassword);
      //const Authorization = req.header("Authorization");
      //const token = Authorization.split("Bearer ")[1];
      //const { email } = jwt.decode(token);
      console.log(email);
      await verificarUsuario(email, password);
      const usuario = await modificarPassword(email, newpassword);
      res.send("password modificado con exito");
    } catch (error) {
      res.status(500).send(error);
      console.log("no es posible ejecutar el requerimiento");
    }
  }
);*/

// productos vista home
app.get("/", cors(), async (req, res) => {
  try {
    const productos = await obtenerPublicaciones();
    res.send(productos);
  } catch (error) {
    res.status(500).send(error);
    console.log("no es posible ejecutar el requerimiento");
  }
});
//agregar publicacion nueva
app.post("/publicaciones/:id", cors(), async (req, res) => {
  try {
    const { id } = req.params;
    console.log(id);
    const id_usuario = id;
    console.log(id_usuario);
    const { nombre_producto, descripcion, precio, url } = req.body;

    console.log(req.body);
    await crearNuevaPublicacion(
      nombre_producto,
      descripcion,
      precio,
      id_usuario,
      url
    );
    res.send("producto creado con exito");
  } catch (error) {
    res.status(500).send(error);
    console.log("no es posible ejecutar el requerimiento");
  }
});
//obtener detalles de publicacion
app.get("/publicaciones/:id", cors(), async (req, res) => {
  try {
    const {id}= req.params
    const productos = await obtenerPublicacionPorId (id);
    res.send(productos);
  } catch (error) {
    res.status(500).send(error);
    console.log("no es posible ejecutar el requerimiento");
  }
});

//borrar publicacion
app.delete("/publicaciones/:id", cors(), async (req, res) => {
  try {
    const {id}= req.params
    console.log(id)
    const productos = await borrarPublicacionPorId (id);
    res.send(productos);
  } catch (error) {
    res.status(500).send(error);
    console.log("no es posible ejecutar el requerimiento");
  }
});




usuarios
const bcrypt = require("bcryptjs");
const { pool } = require("../db")

const verificarUsuario = async (email, password) => {
  const consulta = "SELECT * FROM usuarios where email = $1";
    const {
    rows: [usuario],
    rowCount,      
  } = await pool.query(consulta, [email]);
  const { password: passwordEncriptada } = usuario;
  const passwordCorrecta = bcrypt.compareSync(password, passwordEncriptada);
  if (!passwordCorrecta || !rowCount) {
    throw { code: 401, message: "Usuario o contraseña incorrecto" };
  }
};

const verificarCorreo= async (email) => {
  const consulta = "SELECT * FROM usuarios where email = $1";
    const {
    rowCount,      
  } = await pool.query(consulta, [email]);
  if (rowCount) {
    throw { message: "Este correo ya se encuentra registrado" };
  }
};

const obtenerDatosUsuario = async (email) => {
  const consulta = "SELECT * FROM usuarios where email = $1";
  const {
    rows: [usuario],
    rowCount,
  } = await pool.query(consulta, [email]);
  const { password: passwordEncriptada } = usuario;
  if (!rowCount) {
    throw { code: 404, message: "usuario no encontrado" };
  }
  delete usuario.password;
  return usuario;
};

const agregarUsuario = async (nombre, email, password, telefono) => {
  const passwordEncriptada = bcrypt.hashSync(password);
  console.log(passwordEncriptada);
  const values = [nombre, email, passwordEncriptada, telefono];
  const consulta = "INSERT INTO usuarios values (DEFAULT, $1, $2, $3, $4)";
  try {
    await pool.query(consulta, values);
} catch (error) {
    console.error("Error during user insertion:", error);
    throw error;
}};

const deleteUsuario = async (email) => {
  const consulta = "DELETE FROM usuarios WHERE email = $1";
  console.log(email)
  const { rows: [usuarioBorrado], rowCount } = await pool.query(consulta, [email]);
  return usuarioBorrado;
};

const modificarPassword = async (email,newPassword) => {
  
  const passwordEncriptada = bcrypt.hashSync(newPassword);
  console.log(passwordEncriptada);
  const values = [email, passwordEncriptada];
  const consulta = 'UPDATE usuarios SET password = $2 WHERE email = $1'
  console.log(email)
  try {
    await pool.query(consulta, values);
} catch (error) {
    console.error("Error during user insertion:", error);
    throw error;
}};
  

module.exports = { verificarUsuario, obtenerDatosUsuario, agregarUsuario, deleteUsuario, modificarPassword, verificarCorreo};



productos

//consultas a la base datos para el producto
const { pool } = require("../db")

//obtener todas la publicaciones
const obtenerPublicaciones = async () => {
    const consulta = "SELECT * FROM productos";
    console.log(consulta)
    const { rows: publicaciones, rowCount } = await pool.query(consulta);
    return publicaciones;
};

//ver la descrpcion de una publicacion
const obtenerPublicacionPorId = async (idProducto) => {
    const consulta = "SELECT * FROM productos WHERE id_producto = $1";
    const { rows: [publicacion], rowCount } = await pool.query(consulta, [idProducto]);
    return publicacion;
};

//crear una nueva publicacion
const crearNuevaPublicacion = async (nombreProducto, descripcion, precio, idUsuario, url) => {
    const consulta = "INSERT INTO productos  VALUES (default,$1, $2, $3, $4, $5)";
    
    const values = [nombreProducto, descripcion, precio, idUsuario, url]
    console.log(values)
    const { rows: [nuevaPublicacion] } = await pool.query(consulta, values);
    return nuevaPublicacion;
};

//borrar una publicacion
const borrarPublicacionPorId = async (idProducto) => {
    const consulta = "DELETE FROM productos WHERE id_producto = $1";
    const { rows: [publicacionBorrada], rowCount } = await pool.query(consulta, [idProducto]);
    return publicacionBorrada;
};

module.exports = {
    obtenerPublicaciones,
    obtenerPublicacionPorId,
    crearNuevaPublicacion,
    borrarPublicacionPorId
};